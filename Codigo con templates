#include <iostream>
using namespace std;

class NewClass {
private:
    int value;

public:
    NewClass(int value) : value(value) {}

    int getValue() const {
        return value;
    }
};

template<typename T>
class IntegerArray {
private:
    T *data;
    int size;

public:
    IntegerArray(int size) {
        data = new T[size];
        this->size = size;
    }

    // Constructor de copia
    IntegerArray(const IntegerArray& other) {
        size = other.size;
        data = new T[size];
        for (int i = 0; i < size; i++) {
            data[i] = other.data[i];
        }
    }

    ~IntegerArray() {
        delete[] data;
    }

    //  modificar un elemento del arreglo
    void set(int index, T value) {
        if (index >= 0 && index < size) {
            data[index] = value;
        }
    }

    //  obtener un elemento del arreglo
    T get(int index) const {
        if (index >= 0 && index < size) {
            return data[index];
        }
        return T(); 
    }

    void print() const {
        for (int i = 0; i < size; i++) {
            cout << data[i].getValue() << " ";
        }
        cout << endl;
    }
};

int main() {
    IntegerArray<NewClass> a(3);
    a.set(0, NewClass(4));
    a.set(1, NewClass(2));
    a.set(2, NewClass(6));

    a.print(); 
    return 0;
}
